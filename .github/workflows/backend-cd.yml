name: CD - Deploy Backend Services to AKS

on:
  workflow_call:
    inputs:
      aks_cluster_name:
        required: true
        type: string
      aks_resource_group:
        required: true
        type: string
      aks_acr_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:                          
      AZURE_CREDENTIALS:
        required: true

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context
        run: |
          az aks get-credentials --resource-group ${{ inputs.aks_resource_group }} \
                                 --name ${{ inputs.aks_cluster_name }} \
                                 --overwrite-existing

      - name: Attach ACR
        run: |
          az aks update --name ${{ inputs.aks_cluster_name }} \
                        --resource-group ${{ inputs.aks_resource_group }} \
                        --attach-acr ${{ inputs.aks_acr_name }}

      - name: Deploy Backend Infrastructure
        run: |
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy Backend Microservices
        run: |
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Update Backend Images
        run: |
          kubectl set image deployment/product-service product-service=${{ inputs.aks_acr_name }}.azurecr.io/product_service:${{ inputs.image_tag }}
          kubectl set image deployment/order-service order-service=${{ inputs.aks_acr_name }}.azurecr.io/order_service:${{ inputs.image_tag }}

      - name: Get Product Service IP
        id: get_product_ip
        run: |
          ip=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "ip=$ip" >> $GITHUB_OUTPUT

      - name: Get Order Service IP
        id: get_order_ip
        run: |
          ip=$(kubectl get svc order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "ip=$ip" >> $GITHUB_OUTPUT