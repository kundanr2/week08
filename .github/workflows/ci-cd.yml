name: Full CI/CD Pipeline - Backend + Frontend

on:
  push:
    branches:
      - development   # Run on pushes to development
  pull_request:
    branches:
      - main          # Run on PRs into main
  workflow_dispatch:   # Manual trigger option

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # -----------------------------
  # 1. Backend - Test & Lint
  # -----------------------------
  test_and_lint_backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do pip install -r "$req"; done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  # -----------------------------
  # 2. Backend - Build & Push Images
  # -----------------------------
  build_backend_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backend
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build and Push Product Service Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ./backend/product_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}

      - name: Build and Push Order Service Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ./backend/order_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}

  # -----------------------------
  # 3. Backend - Deploy to AKS
  # -----------------------------
  deploy_backend:
    needs: build_backend_images
    uses: ./.github/workflows/backend-cd.yml
    with:
      aks_cluster_name: sit722wk09aks
      aks_resource_group: sit722-rg
      aks_acr_name: sit722acr9
      image_tag: ${{ github.sha }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  # -----------------------------
  # 4. Frontend - Build & Push Image
  # -----------------------------
  build_frontend_image:
    runs-on: ubuntu-latest
    needs: deploy_backend
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ./frontend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

  # -----------------------------
  # 5. Frontend - Deploy to AKS
  # -----------------------------
  deploy_frontend:
    needs: build_frontend_image
    uses: ./.github/workflows/frontend-cd.yml
    with:
      product_api_ip: ${{ needs.deploy_backend.outputs.PRODUCT_API_IP }}
      order_api_ip: ${{ needs.deploy_backend.outputs.ORDER_API_IP }}
      aks_cluster_name: sit722wk09aks   # ✅ matches real cluster
      aks_resource_group: sit722-rg
      aks_acr_name: sit722acr9          # ✅ new, passed to frontend workflow
      image_tag: ${{ github.sha }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}